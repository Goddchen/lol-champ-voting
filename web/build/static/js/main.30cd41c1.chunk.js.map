{"version":3,"sources":["Champion.js","App.js","serviceWorker.js","index.js"],"names":["Champion","props","submitVote","bind","Card","className","CardHeader","this","data","name","CardImg","src","id","CardBody","CardText","votings","mastery","Button","onClick","console","log","key","fetch","method","body","JSON","stringify","champion_id","headers","then","_","updateVotings","catch","error","Component","App","state","masteries","champions","Object","keys","championsJSON","map","res","json","setState","Container","Row","champion","find","voting","parseInt","count","sort","c1","c2","filter","Col","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"st1HA8CeA,E,YAzCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,WAAa,EAAKA,WAAWC,KAAhB,gBAFH,E,sEAMf,OACI,6BACI,kBAACC,EAAA,EAAD,CAAMC,UAAU,aACZ,kBAACC,EAAA,EAAD,KAAaC,KAAKN,MAAMO,KAAKC,MAC7B,kBAACC,EAAA,EAAD,CAASC,IAAG,qEAAgEJ,KAAKN,MAAMO,KAAKI,GAAhF,YACZ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACKP,KAAKN,MAAMc,QADhB,UAGA,kBAACD,EAAA,EAAD,uBACoBP,KAAKN,MAAMe,SAE/B,kBAACC,EAAA,EAAD,CAAQZ,UAAU,QAAQa,QAASX,KAAKL,YAAxC,a,mCAON,IAAD,OACTiB,QAAQC,IAAR,kBAAuBb,KAAKN,MAAMO,KAAKa,MACvCC,MAAM,gCACF,CACIC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEC,YAAapB,KAAKN,MAAMO,KAAKa,MACpDO,QAAS,CACL,eAAgB,sBAIvBC,KAAK,SAAAC,GAAC,OAAI,EAAK7B,MAAM8B,kBACrBC,MAAMb,QAAQc,W,GAvCJC,a,QCqERC,E,YA/Db,WAAYlC,GAAQ,IAAD,8BACjB,4CAAMA,KACDmC,MAAQ,CACXrB,QAAS,GACTsB,UAAW,GACXC,UAAWC,OAAOC,KAAKC,EAAcjC,MAAMkC,IAAI,SAAArB,GAAG,OAAIoB,EAAcjC,KAAKa,MAE3E,EAAKU,cAAgB,EAAKA,cAAc5B,KAAnB,gBAPJ,E,iFAUE,IAAD,OAClBI,KAAKwB,gBACLT,MAAM,mCACHO,KAAK,SAAAc,GAAG,OAAIA,EAAIC,SAChBf,KAAK,SAAArB,GACJ,EAAKqC,SAAS,CACZR,UAAW7B,MAGdwB,MAAMb,QAAQc,S,+BAGT,IAAD,OACP,OACE,6BACE,wBAAI5B,UAAU,eAAd,+CACA,uBAAGA,UAAU,eAAb,uFACA,kBAACyC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGxC,KAAK6B,MAAME,UACTI,IAAI,SAAAM,GAGH,OAFAA,EAASjC,SAAW,EAAKqB,MAAMrB,QAAQkC,KAAK,SAAAC,GAAM,OAAIC,SAASD,EAAOvB,eAAiBwB,SAASH,EAAS3B,QAAS,CAAE+B,MAAO,IAAKA,MAChIJ,EAAShC,SAAW,EAAKoB,MAAMC,UAAUY,KAAK,SAAAjC,GAAO,OAAImC,SAASnC,EAAQW,eAAiBwB,SAASH,EAAS3B,QAAS,CAAEL,QAAS,IAAKA,QAC/HgC,IAERK,KAAK,SAACC,EAAIC,GACT,OAAID,EAAGvC,UAAYwC,EAAGxC,UAAkBuC,EAAGvC,QAAUwC,EAAGxC,SACjDuC,EAAG7C,KAAO8C,EAAG9C,OAErB+C,OAAO,SAAAR,GAAQ,OAAIA,EAAShC,QAAU,IACtC0B,IAAI,SAAAM,GAAQ,OACX,kBAACS,EAAA,EAAD,CAAKpD,UAAU,gCAAgCgB,IAAK2B,EAAS3B,KAC3D,kBAAC,EAAD,CAAUb,KAAMwC,EAAUjC,QAASiC,EAASjC,QAASC,QAASgC,EAAShC,QAASe,cAAe,EAAKA,wB,sCASnG,IAAD,OACdT,MAAM,iCACHO,KAAK,SAAAc,GAAG,OAAIA,EAAIC,SAChBf,KAAK,SAAArB,GACJ,EAAKqC,SAAS,CACZ9B,QAASP,MAGZwB,MAAMb,QAAQc,W,GA7DHC,aCKEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC,iB","file":"static/js/main.30cd41c1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Card, CardBody, CardText, CardHeader, CardImg, Button } from 'reactstrap'\r\n\r\nclass Champion extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.submitVote = this.submitVote.bind(this)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Card className=\"shadow-sm\">\r\n                    <CardHeader>{this.props.data.name}</CardHeader>\r\n                    <CardImg src={`http://ddragon.leagueoflegends.com/cdn/img/champion/splash/${this.props.data.id}_0.jpg`} />\r\n                    <CardBody>\r\n                        <CardText>\r\n                            {this.props.votings} Votes\r\n                        </CardText>\r\n                        <CardText>\r\n                            Current Level: {this.props.mastery}\r\n                        </CardText>\r\n                        <Button className=\"w-100\" onClick={this.submitVote}>Vote</Button>\r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    submitVote() {\r\n        console.log(`Clicked ${this.props.data.key}`)\r\n        fetch('http://localhost:3000/votings',\r\n            {\r\n                method: 'POST',\r\n                body: JSON.stringify({ champion_id: this.props.data.key }),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }\r\n        )\r\n            .then(_ => this.props.updateVotings())\r\n            .catch(console.error)\r\n    }\r\n};\r\n\r\nexport default Champion","import React, { Component } from 'react'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col } from 'reactstrap'\nimport Champion from './Champion'\nimport championsJSON from './champions.json'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      votings: [],\n      masteries: [],\n      champions: Object.keys(championsJSON.data).map(key => championsJSON.data[key])\n    }\n    this.updateVotings = this.updateVotings.bind(this)\n  }\n\n  componentDidMount() {\n    this.updateVotings()\n    fetch('http://localhost:3000/masteries')\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          masteries: data\n        })\n      })\n      .catch(console.error)\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"text-center\">Which champ should I level to level 5 next?</h1>\n        <p className=\"text-center\">I'll be playing only the most voted champ in normal games until level 5 is reached.</p>\n        <Container>\n          <Row>\n            {this.state.champions\n              .map(champion => {\n                champion.votings = (this.state.votings.find(voting => parseInt(voting.champion_id) === parseInt(champion.key)) || { count: 0 }).count\n                champion.mastery = (this.state.masteries.find(mastery => parseInt(mastery.champion_id) === parseInt(champion.key)) || { mastery: 0 }).mastery\n                return champion\n              })\n              .sort((c1, c2) => {\n                if (c1.votings !== c2.votings) return -(c1.votings - c2.votings)\n                return c1.name - c2.name\n              })\n              .filter(champion => champion.mastery < 5)\n              .map(champion =>\n                <Col className=\"col-12 col-sm-6 col-md-3 mb-3\" key={champion.key}>\n                  <Champion data={champion} votings={champion.votings} mastery={champion.mastery} updateVotings={this.updateVotings}/>\n                </Col>\n              )}\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n\n  updateVotings() {\n    fetch('http://localhost:3000/votings')\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          votings: data\n        })\n      })\n      .catch(console.error)\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}